{"language":"javascript","client_name":"inchjs","args":[],"client_version":"0.4.1","git_repo_url":"https://github.com/obartra/ssim.git","branch_name":"fix-master","objects":[{"comment":"/**\n* Computes the mean value of a given array. It is the sum of a list of numbers divided by the\n* number of numbers in the list.\n*\n* @method average\n* @param {Number[]} xn - The target array\n* @returns {Number} average - The mean value of all elements within the array\n* @public\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[0,325],"filename":"math.js","lineno":1,"path":"/src","code":{}},"description":"Computes the mean value of a given array. It is the sum of a list of numbers divided by the\nnumber of numbers in the list.","kind":"function","name":"average","params":[{"type":{"names":["Array.<Number>"]},"description":"The target array","name":"xn"}],"returns":[{"type":{"names":["Number"]},"description":"average - The mean value of all elements within the array"}],"access":"public","memberof":"math","since":"0.0.1","scope":"static","longname":"math.average"},{"comment":"/**\n* Computes the mean value of a given array. It is the sum of a list of numbers divided by the\n* number of numbers in the list.\n*\n* @method average\n* @param {Number[]} xn - The target array\n* @returns {Number} average - The mean value of all elements within the array\n* @public\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[326,379],"filename":"math.js","lineno":12,"path":"/src","code":{"id":"astnode100000001","name":"average","type":"FunctionDeclaration","paramnames":["xn"]}},"undocumented":true,"name":"average","longname":"average","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Computes the sum of a given array. It adds all values within the array and returns the total\n*\n* @method sum\n* @param {Number[]} xn - The target array\n* @returns {Number} sum - The total value\n* @private\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[381,634],"filename":"math.js","lineno":16,"path":"/src","code":{}},"description":"Computes the sum of a given array. It adds all values within the array and returns the total","kind":"function","name":"sum","params":[{"type":{"names":["Array.<Number>"]},"description":"The target array","name":"xn"}],"returns":[{"type":{"names":["Number"]},"description":"sum - The total value"}],"access":"private","memberof":"math","since":"0.0.1","scope":"static","longname":"math.sum"},{"comment":"/**\n* Computes the sum of a given array. It adds all values within the array and returns the total\n*\n* @method sum\n* @param {Number[]} xn - The target array\n* @returns {Number} sum - The total value\n* @private\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[635,741],"filename":"math.js","lineno":26,"path":"/src","code":{"id":"astnode100000013","name":"sum","type":"FunctionDeclaration","paramnames":["xn"]},"vars":{"out":"sum~out","x":"sum~x"}},"undocumented":true,"name":"sum","longname":"sum","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Computes the largest integer less than or equal to a given number for each member of a given\n* array.\n*\n* @method floor\n* @param {Number[]} xn - The target array\n* @returns {Number[]} floorArr - An array with the Math.floor value for each element of the target\n* array\n* @private\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[743,1074],"filename":"math.js","lineno":35,"path":"/src","code":{}},"description":"Computes the largest integer less than or equal to a given number for each member of a given\narray.","kind":"function","name":"floor","params":[{"type":{"names":["Array.<Number>"]},"description":"The target array","name":"xn"}],"returns":[{"type":{"names":["Array.<Number>"]},"description":"floorArr - An array with the Math.floor value for each element of the target\narray"}],"access":"private","memberof":"math","since":"0.0.1","scope":"static","longname":"math.floor"},{"comment":"/**\n* Computes the largest integer less than or equal to a given number for each member of a given\n* array.\n*\n* @method floor\n* @param {Number[]} xn - The target array\n* @returns {Number[]} floorArr - An array with the Math.floor value for each element of the target\n* array\n* @private\n* @memberOf math\n* @since 0.0.1\n*/","meta":{"range":[1075,1201],"filename":"math.js","lineno":47,"path":"/src","code":{"id":"astnode100000042","name":"floor","type":"FunctionDeclaration","paramnames":["xn"]},"vars":{"out":"floor~out","x":"floor~x","out[undefined]":"floor~out.undefined]"}},"undocumented":true,"name":"floor","longname":"floor","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Computes the sum of all elements within a matrix\n*\n* @method sum2d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @returns {Number} sum - The total value of adding each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[1203,1447],"filename":"math.js","lineno":57,"path":"/src","code":{}},"description":"Computes the sum of all elements within a matrix","kind":"function","name":"sum2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"mx"}],"returns":[{"type":{"names":["Number"]},"description":"sum - The total value of adding each cell"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.sum2d"},{"comment":"/**\n* Computes the sum of all elements within a matrix\n*\n* @method sum2d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @returns {Number} sum - The total value of adding each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[1448,1608],"filename":"math.js","lineno":67,"path":"/src","code":{"id":"astnode100000077","name":"sum2d","type":"FunctionDeclaration","paramnames":["mx"]},"vars":{"out":"sum2d~out","x":"sum2d~x","y":"sum2d~y"}},"undocumented":true,"name":"sum2d","longname":"sum2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Adds values of two matrices of the same size\n*\n* @method add2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} sumMx - A matrix with a cell-by-cell sum of `mx1` and `mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[1610,1959],"filename":"math.js","lineno":79,"path":"/src","code":{}},"description":"Adds values of two matrices of the same size","kind":"function","name":"add2dMx","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second input matrix","name":"mx2"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"sumMx - A matrix with a cell-by-cell sum of `mx1` and `mx2`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.add2dMx"},{"comment":"/**\n* Adds values of two matrices of the same size\n*\n* @method add2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} sumMx - A matrix with a cell-by-cell sum of `mx1` and `mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[1960,2166],"filename":"math.js","lineno":90,"path":"/src","code":{"id":"astnode100000123","name":"add2dMx","type":"FunctionDeclaration","paramnames":["mx1","mx2"]},"vars":{"out":"add2dMx~out","x":"add2dMx~x","out[undefined]":"add2dMx~out.undefined]","y":"add2dMx~y","out[undefined][undefined]":"add2dMx~out.undefined][undefined]"}},"undocumented":true,"name":"add2dMx","longname":"add2dMx","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Adds a constant value two each matrix cell\n*\n* @method add2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} increase - The value to add\n* @returns {Array.<Array.<Number>>} sumMx - The cell-by-cell matrix sum of `mx1` and `increase`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[2168,2501],"filename":"math.js","lineno":103,"path":"/src","code":{}},"description":"Adds a constant value two each matrix cell","kind":"function","name":"add2dScalar","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Number"]},"description":"The value to add","name":"increase"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"sumMx - The cell-by-cell matrix sum of `mx1` and `increase`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.add2dScalar"},{"comment":"/**\n* Adds a constant value two each matrix cell\n*\n* @method add2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} increase - The value to add\n* @returns {Array.<Array.<Number>>} sumMx - The cell-by-cell matrix sum of `mx1` and `increase`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[2502,2712],"filename":"math.js","lineno":114,"path":"/src","code":{"id":"astnode100000186","name":"add2dScalar","type":"FunctionDeclaration","paramnames":["mx","increase"]},"vars":{"out":"add2dScalar~out","x":"add2dScalar~x","out[undefined]":"add2dScalar~out.undefined]","y":"add2dScalar~y","out[undefined][undefined]":"add2dScalar~out.undefined][undefined]"}},"undocumented":true,"name":"add2dScalar","longname":"add2dScalar","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Adds values of two matrices of the same size or a matrix and a constant\n*\n* @method add2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} increase - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} sumMx - A matrix with a cell-by-cell sum of the first and\n* second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[2714,3140],"filename":"math.js","lineno":127,"path":"/src","code":{}},"description":"Adds values of two matrices of the same size or a matrix and a constant","kind":"function","name":"add2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>","Number"]},"description":"The second input matrix or the constant value","name":"increase"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"sumMx - A matrix with a cell-by-cell sum of the first and\nsecond parameters"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.add2d"},{"comment":"/**\n* Adds values of two matrices of the same size or a matrix and a constant\n*\n* @method add2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} increase - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} sumMx - A matrix with a cell-by-cell sum of the first and\n* second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[3141,3280],"filename":"math.js","lineno":139,"path":"/src","code":{"id":"astnode100000245","name":"add2d","type":"FunctionDeclaration","paramnames":["mx","increase"]}},"undocumented":true,"name":"add2d","longname":"add2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Divides each matrix cell by a constant value\n*\n* @method divide2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} divisor - The value to divide by\n* @returns {Array.<Array.<Number>>} dividedMx - The cell-by-cell matrix divison of `mx1` and\n* `divisor`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[3282,3635],"filename":"math.js","lineno":146,"path":"/src","code":{}},"description":"Divides each matrix cell by a constant value","kind":"function","name":"divide2dScalar","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Number"]},"description":"The value to divide by","name":"divisor"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"dividedMx - The cell-by-cell matrix divison of `mx1` and\n`divisor`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.divide2dScalar"},{"comment":"/**\n* Divides each matrix cell by a constant value\n*\n* @method divide2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} divisor - The value to divide by\n* @returns {Array.<Array.<Number>>} dividedMx - The cell-by-cell matrix divison of `mx1` and\n* `divisor`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[3636,3847],"filename":"math.js","lineno":158,"path":"/src","code":{"id":"astnode100000266","name":"divide2dScalar","type":"FunctionDeclaration","paramnames":["mx","divisor"]},"vars":{"out":"divide2dScalar~out","x":"divide2dScalar~x","out[undefined]":"divide2dScalar~out.undefined]","y":"divide2dScalar~y","out[undefined][undefined]":"divide2dScalar~out.undefined][undefined]"}},"undocumented":true,"name":"divide2dScalar","longname":"divide2dScalar","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Divides, cell-by-cell, values of two matrices of the same size\n*\n* @method divide2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} divideMx - A matrix with a cell-by-cell division of `mx1`/`mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[3849,4223],"filename":"math.js","lineno":171,"path":"/src","code":{}},"description":"Divides, cell-by-cell, values of two matrices of the same size","kind":"function","name":"divide2dMx","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second input matrix","name":"mx2"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"divideMx - A matrix with a cell-by-cell division of `mx1`/`mx2`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.divide2dMx"},{"comment":"/**\n* Divides, cell-by-cell, values of two matrices of the same size\n*\n* @method divide2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} divideMx - A matrix with a cell-by-cell division of `mx1`/`mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[4224,4433],"filename":"math.js","lineno":182,"path":"/src","code":{"id":"astnode100000325","name":"divide2dMx","type":"FunctionDeclaration","paramnames":["mx1","mx2"]},"vars":{"out":"divide2dMx~out","x":"divide2dMx~x","out[undefined]":"divide2dMx~out.undefined]","y":"divide2dMx~y","out[undefined][undefined]":"divide2dMx~out.undefined][undefined]"}},"undocumented":true,"name":"divide2dMx","longname":"divide2dMx","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Divides values of two matrices of the same size or between a matrix and a constant\n*\n* @method divide2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} divisor - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} divideMx - A matrix with the cell-by-cell division of the first\n* and second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[4435,4884],"filename":"math.js","lineno":195,"path":"/src","code":{}},"description":"Divides values of two matrices of the same size or between a matrix and a constant","kind":"function","name":"divide2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>","Number"]},"description":"The second input matrix or the constant value","name":"divisor"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"divideMx - A matrix with the cell-by-cell division of the first\nand second parameters"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.divide2d"},{"comment":"/**\n* Divides values of two matrices of the same size or between a matrix and a constant\n*\n* @method divide2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} divisor - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} divideMx - A matrix with the cell-by-cell division of the first\n* and second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[4885,5029],"filename":"math.js","lineno":207,"path":"/src","code":{"id":"astnode100000388","name":"divide2d","type":"FunctionDeclaration","paramnames":["mx","divisor"]}},"undocumented":true,"name":"divide2d","longname":"divide2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Multiplies each matrix cell by a constant value\n*\n* @method multiply2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} multiplier - The value to multiply each cell with\n* @returns {Array.<Array.<Number>>} multMx - The cell-by-cell matrix multiplication of `mx1`\n* and `multiplier`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[5031,5413],"filename":"math.js","lineno":214,"path":"/src","code":{}},"description":"Multiplies each matrix cell by a constant value","kind":"function","name":"multiply2dScalar","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Number"]},"description":"The value to multiply each cell with","name":"multiplier"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"multMx - The cell-by-cell matrix multiplication of `mx1`\nand `multiplier`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.multiply2dScalar"},{"comment":"/**\n* Multiplies each matrix cell by a constant value\n*\n* @method multiply2dScalar\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Number} multiplier - The value to multiply each cell with\n* @returns {Array.<Array.<Number>>} multMx - The cell-by-cell matrix multiplication of `mx1`\n* and `multiplier`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[5414,5633],"filename":"math.js","lineno":226,"path":"/src","code":{"id":"astnode100000409","name":"multiply2dScalar","type":"FunctionDeclaration","paramnames":["mx","multiplier"]},"vars":{"out":"multiply2dScalar~out","x":"multiply2dScalar~x","out[undefined]":"multiply2dScalar~out.undefined]","y":"multiply2dScalar~y","out[undefined][undefined]":"multiply2dScalar~out.undefined][undefined]"}},"undocumented":true,"name":"multiply2dScalar","longname":"multiply2dScalar","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Multiplies, cell-by-cell, values of two matrices of the same size\n*\n* @method multiply2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} multMx - A matrix with a cell-by-cell multiplication of\n* `mx1` * `mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[5635,6023],"filename":"math.js","lineno":239,"path":"/src","code":{}},"description":"Multiplies, cell-by-cell, values of two matrices of the same size","kind":"function","name":"multiply2dMx","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second input matrix","name":"mx2"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"multMx - A matrix with a cell-by-cell multiplication of\n`mx1` * `mx2`"}],"access":"private","memberof":"math","since":"0.0.2","scope":"static","longname":"math.multiply2dMx"},{"comment":"/**\n* Multiplies, cell-by-cell, values of two matrices of the same size\n*\n* @method multiply2dMx\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>} mx2 - The second input matrix\n* @returns {Array.<Array.<Number>>} multMx - A matrix with a cell-by-cell multiplication of\n* `mx1` * `mx2`\n* @private\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[6024,6235],"filename":"math.js","lineno":251,"path":"/src","code":{"id":"astnode100000468","name":"multiply2dMx","type":"FunctionDeclaration","paramnames":["mx1","mx2"]},"vars":{"out":"multiply2dMx~out","x":"multiply2dMx~x","out[undefined]":"multiply2dMx~out.undefined]","y":"multiply2dMx~y","out[undefined][undefined]":"multiply2dMx~out.undefined][undefined]"}},"undocumented":true,"name":"multiply2dMx","longname":"multiply2dMx","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Multiplies values of two matrices of the same size or between a matrix and a constant\n*\n* @method multiply2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} multiplier - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} multMx - A matrix with the cell-by-cell multiplication of the\n* first and second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[6237,6698],"filename":"math.js","lineno":264,"path":"/src","code":{}},"description":"Multiplies values of two matrices of the same size or between a matrix and a constant","kind":"function","name":"multiply2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first input matrix","name":"mx1"},{"type":{"names":["Array.<Array.<Number>>","Number"]},"description":"The second input matrix or the constant value","name":"multiplier"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"multMx - A matrix with the cell-by-cell multiplication of the\nfirst and second parameters"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.multiply2d"},{"comment":"/**\n* Multiplies values of two matrices of the same size or between a matrix and a constant\n*\n* @method multiply2d\n* @param {Array.<Array.<Number>>} mx1 - The first input matrix\n* @param {Array.<Array.<Number>>|Number} multiplier - The second input matrix or the constant value\n* @returns {Array.<Array.<Number>>} multMx - A matrix with the cell-by-cell multiplication of the\n* first and second parameters\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[6699,6861],"filename":"math.js","lineno":276,"path":"/src","code":{"id":"astnode100000531","name":"multiply2d","type":"FunctionDeclaration","paramnames":["mx","multiplier"]}},"undocumented":true,"name":"multiply2d","longname":"multiply2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Generates the cell-by-cell square value of a target matrix\n*\n* @method square2d\n* @param {Array.<Array.<Number>>} mx - The target matrix\n* @returns {Array.<Array.<Number>>} squareMx - A matrix with squared value of each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[6863,7147],"filename":"math.js","lineno":283,"path":"/src","code":{}},"description":"Generates the cell-by-cell square value of a target matrix","kind":"function","name":"square2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The target matrix","name":"mx"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"squareMx - A matrix with squared value of each cell"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.square2d"},{"comment":"/**\n* Generates the cell-by-cell square value of a target matrix\n*\n* @method square2d\n* @param {Array.<Array.<Number>>} mx - The target matrix\n* @returns {Array.<Array.<Number>>} squareMx - A matrix with squared value of each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[7148,7201],"filename":"math.js","lineno":293,"path":"/src","code":{"id":"astnode100000552","name":"square2d","type":"FunctionDeclaration","paramnames":["mx"]}},"undocumented":true,"name":"square2d","longname":"square2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Calculates the total mean value for a given matrix\n*\n* @method mean2d\n* @param {Array.<Array.<Number>>} mx - The target matrix\n* @returns {Number} mean - The total mean of each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[7203,7444],"filename":"math.js","lineno":297,"path":"/src","code":{}},"description":"Calculates the total mean value for a given matrix","kind":"function","name":"mean2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The target matrix","name":"mx"}],"returns":[{"type":{"names":["Number"]},"description":"mean - The total mean of each cell"}],"access":"public","memberof":"math","since":"0.0.2","scope":"static","longname":"math.mean2d"},{"comment":"/**\n* Calculates the total mean value for a given matrix\n*\n* @method mean2d\n* @param {Array.<Array.<Number>>} mx - The target matrix\n* @returns {Number} mean - The total mean of each cell\n* @public\n* @memberOf math\n* @since 0.0.2\n*/","meta":{"range":[7445,7516],"filename":"math.js","lineno":307,"path":"/src","code":{"id":"astnode100000561","name":"mean2d","type":"FunctionDeclaration","paramnames":["mx"]}},"undocumented":true,"name":"mean2d","longname":"mean2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Generates all basic arithmetic and matrix computations required\n*\n* Most of these methods use plain for loops and reduce nested calls. This results in about ~100x\n* improvement on SSIM computation for 512x512 images on recent versions of node (~v6.7) over\n* implementations using map or reduce.\n*\n* @namespace math\n*/","meta":{"range":[7518,7849],"filename":"math.js","lineno":311,"path":"/src","code":{}},"description":"Generates all basic arithmetic and matrix computations required\n\nMost of these methods use plain for loops and reduce nested calls. This results in about ~100x\nimprovement on SSIM computation for 512x512 images on recent versions of node (~v6.7) over\nimplementations using map or reduce.","kind":"namespace","name":"math","longname":"math","scope":"global"},{"comment":"/**\n* `C = conv2(a,b)` computes the two-dimensional convolution of matrices `a` and `b`. If one of\n* these matrices describes a two-dimensional finite impulse response (FIR) filter, the other matrix\n* is filtered in two dimensions. The size of `c` is determined as follows:\n*\n* ```\n* if [ma,na] = size(a), [mb,nb] = size(b), and [mc,nc] = size(c), then\n* mc = max([ma+mb-1,ma,mb]) and nc = max([na+nb-1,na,nb]).\n* ```\n*\n* `shape` returns a subsection of the two-dimensional convolution, based on one of these values for\n* the parameter:\n*\n* - **full**: Returns the full two-dimensional convolution (default).\n* - **same**: Returns the central part of the convolution of the same size as `a`.\n* - **valid**: Returns only those parts of the convolution that are computed without the\n*   zero-padded edges. Using this option, `size(c) === max([ma-max(0,mb-1),na-max(0,nb-1)],0)`\n*\n* This method mimics Matlab's `conv2` method.\n*\n* @method conv2\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @param {String} [shape='full'] - One of 'full' / 'same' / 'valid'\n* @returns {Array.<Array.<Number>>} c - Returns the central part of the convolution of the same\n* size as `a`.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[73,1380],"filename":"conv2.js","lineno":4,"path":"/src/matlab","code":{}},"description":"`C = conv2(a,b)` computes the two-dimensional convolution of matrices `a` and `b`. If one of\nthese matrices describes a two-dimensional finite impulse response (FIR) filter, the other matrix\nis filtered in two dimensions. The size of `c` is determined as follows:\n\n```\nif [ma,na] = size(a), [mb,nb] = size(b), and [mc,nc] = size(c), then\nmc = max([ma+mb-1,ma,mb]) and nc = max([na+nb-1,na,nb]).\n```\n\n`shape` returns a subsection of the two-dimensional convolution, based on one of these values for\nthe parameter:\n\n- **full**: Returns the full two-dimensional convolution (default).\n- **same**: Returns the central part of the convolution of the same size as `a`.\n- **valid**: Returns only those parts of the convolution that are computed without the\n  zero-padded edges. Using this option, `size(c) === max([ma-max(0,mb-1),na-max(0,nb-1)],0)`\n\nThis method mimics Matlab's `conv2` method.","kind":"function","name":"conv2","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first matrix","name":"a"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second matrix","name":"b"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'full'","description":"One of 'full' / 'same' / 'valid'","name":"shape"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"c - Returns the central part of the convolution of the same\nsize as `a`."}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.conv2"},{"comment":"/**\n* `C = conv2(a,b)` computes the two-dimensional convolution of matrices `a` and `b`. If one of\n* these matrices describes a two-dimensional finite impulse response (FIR) filter, the other matrix\n* is filtered in two dimensions. The size of `c` is determined as follows:\n*\n* ```\n* if [ma,na] = size(a), [mb,nb] = size(b), and [mc,nc] = size(c), then\n* mc = max([ma+mb-1,ma,mb]) and nc = max([na+nb-1,na,nb]).\n* ```\n*\n* `shape` returns a subsection of the two-dimensional convolution, based on one of these values for\n* the parameter:\n*\n* - **full**: Returns the full two-dimensional convolution (default).\n* - **same**: Returns the central part of the convolution of the same size as `a`.\n* - **valid**: Returns only those parts of the convolution that are computed without the\n*   zero-padded edges. Using this option, `size(c) === max([ma-max(0,mb-1),na-max(0,nb-1)],0)`\n*\n* This method mimics Matlab's `conv2` method.\n*\n* @method conv2\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @param {String} [shape='full'] - One of 'full' / 'same' / 'valid'\n* @returns {Array.<Array.<Number>>} c - Returns the central part of the convolution of the same\n* size as `a`.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1381,2279],"filename":"conv2.js","lineno":34,"path":"/src/matlab","code":{"id":"astnode100000618","name":"conv2","type":"FunctionDeclaration","paramnames":["a","b","shape"]},"vars":{"ma":"conv2~ma","na":"conv2~na","mb":"conv2~mb","nb":"conv2~nb","c":"conv2~c","r1":"conv2~r1","c1":"conv2~c1","br1c1":"conv2~br1c1","i":"conv2~i","j":"conv2~j","c[undefined][undefined]":"conv2~c.undefined][undefined]","rowStart":"conv2~rowStart","colStart":"conv2~colStart"}},"undocumented":true,"name":"conv2","longname":"conv2","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Rotates a matrix 180deg.\n*\n* @example\n* 1 2 3 4  becomes:  8 7 6 5\n* 5 6 7 8            4 3 2 1\n*\n* @method rotate1802d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[39,342],"filename":"filter2.js","lineno":3,"path":"/src/matlab","code":{}},"description":"Rotates a matrix 180deg.","examples":["1 2 3 4  becomes:  8 7 6 5\n5 6 7 8            4 3 2 1"],"kind":"function","name":"rotate1802d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"mx"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The rotated matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.rotate1802d"},{"comment":"/**\n* Rotates a matrix 180deg.\n*\n* @example\n* 1 2 3 4  becomes:  8 7 6 5\n* 5 6 7 8            4 3 2 1\n*\n* @method rotate1802d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[343,584],"filename":"filter2.js","lineno":17,"path":"/src/matlab","code":{"id":"astnode100000826","name":"rotate1802d","type":"FunctionDeclaration","paramnames":["b"]},"vars":{"out":"rotate1802d~out","row":"rotate1802d~row","col":"rotate1802d~col","x":"rotate1802d~x","out[undefined]":"rotate1802d~out.undefined]","y":"rotate1802d~y","out[undefined][undefined]":"rotate1802d~out.undefined][undefined]"}},"undocumented":true,"name":"rotate1802d","longname":"rotate1802d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Given a matrix X and a two-dimensional FIR filter h, filter2 rotates your filter matrix 180\n* degrees to create a convolution kernel. It then calls conv2, the two-dimensional convolution\n* function, to implement the filtering operation.\n*\n* This method mimics Matlab's `filter2` method\n*\n* @method filter2\n* @param {Array.<Array.<Number>>} h - The FIR filter\n* @param {Array.<Array.<Number>>} X - The input matrix\n* @param string [shape='same'] - The convolution shape\n* @returns {Array.<Array.<Number>>} conv - The 2D convolution of X with h\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[586,1196],"filename":"filter2.js","lineno":32,"path":"/src/matlab","code":{}},"description":"Given a matrix X and a two-dimensional FIR filter h, filter2 rotates your filter matrix 180\ndegrees to create a convolution kernel. It then calls conv2, the two-dimensional convolution\nfunction, to implement the filtering operation.\n\nThis method mimics Matlab's `filter2` method","kind":"function","name":"filter2","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The FIR filter","name":"h"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"X"},{"description":"[shape='same'] - The convolution shape","name":"string"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"conv - The 2D convolution of X with h"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.filter2"},{"comment":"/**\n* Given a matrix X and a two-dimensional FIR filter h, filter2 rotates your filter matrix 180\n* degrees to create a convolution kernel. It then calls conv2, the two-dimensional convolution\n* function, to implement the filtering operation.\n*\n* This method mimics Matlab's `filter2` method\n*\n* @method filter2\n* @param {Array.<Array.<Number>>} h - The FIR filter\n* @param {Array.<Array.<Number>>} X - The input matrix\n* @param string [shape='same'] - The convolution shape\n* @returns {Array.<Array.<Number>>} conv - The 2D convolution of X with h\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1197,1280],"filename":"filter2.js","lineno":48,"path":"/src/matlab","code":{"id":"astnode100000898","name":"filter2","type":"FunctionDeclaration","paramnames":["h","X","shape"]}},"undocumented":true,"name":"filter2","longname":"filter2","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Creates a matrix of lenght `2 * length + 1` with values being the sum of the square of the\n* distance for each component from the center. E.g:\n*\n* For a length of 5 it results in a matrix size of 11. Looking at [0, 0] (distance: [-5, -5] from\n* the center), the value at that position becomes `-5^2 + -5^2 = 50`\n*\n* @method rangeSquare2d\n* @param {Number} length - The maxium distance from the matrix center\n* @returns {Array.<Array.<Number>>} mx - The generated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[49,585],"filename":"fspecial.js","lineno":3,"path":"/src/matlab","code":{}},"description":"Creates a matrix of lenght `2 * length + 1` with values being the sum of the square of the\ndistance for each component from the center. E.g:\n\nFor a length of 5 it results in a matrix size of 11. Looking at [0, 0] (distance: [-5, -5] from\nthe center), the value at that position becomes `-5^2 + -5^2 = 50`","kind":"function","name":"rangeSquare2d","params":[{"type":{"names":["Number"]},"description":"The maxium distance from the matrix center","name":"length"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"mx - The generated matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.rangeSquare2d"},{"comment":"/**\n* Creates a matrix of lenght `2 * length + 1` with values being the sum of the square of the\n* distance for each component from the center. E.g:\n*\n* For a length of 5 it results in a matrix size of 11. Looking at [0, 0] (distance: [-5, -5] from\n* the center), the value at that position becomes `-5^2 + -5^2 = 50`\n*\n* @method rangeSquare2d\n* @param {Number} length - The maxium distance from the matrix center\n* @returns {Array.<Array.<Number>>} mx - The generated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[586,819],"filename":"fspecial.js","lineno":17,"path":"/src/matlab","code":{"id":"astnode100000933","name":"rangeSquare2d","type":"FunctionDeclaration","paramnames":["length"]},"vars":{"mx":"rangeSquare2d~mx","x":"rangeSquare2d~x","mx[undefined]":"rangeSquare2d~mx.undefined]","y":"rangeSquare2d~y","mx[undefined][undefined]":"rangeSquare2d~mx.undefined][undefined]"}},"undocumented":true,"name":"rangeSquare2d","longname":"rangeSquare2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Applies a gaussian filter of sigma to a given matrix\n*\n* @method gaussianFilter2d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @param {Number} σ - The sigma value\n* @returns {Array.<Array.<Number>>} out - The matrix with the gaussian filter applied\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[821,1146],"filename":"fspecial.js","lineno":30,"path":"/src/matlab","code":{}},"description":"Applies a gaussian filter of sigma to a given matrix","kind":"function","name":"gaussianFilter2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"mx"},{"type":{"names":["Number"]},"description":"The sigma value","name":"σ"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The matrix with the gaussian filter applied"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.gaussianFilter2d"},{"comment":"/**\n* Applies a gaussian filter of sigma to a given matrix\n*\n* @method gaussianFilter2d\n* @param {Array.<Array.<Number>>} mx - The input matrix\n* @param {Number} σ - The sigma value\n* @returns {Array.<Array.<Number>>} out - The matrix with the gaussian filter applied\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1147,1378],"filename":"fspecial.js","lineno":41,"path":"/src/matlab","code":{"id":"astnode100000999","name":"gaussianFilter2d","type":"FunctionDeclaration","paramnames":["mx","σ"]},"vars":{"out":"gaussianFilter2d~out","x":"gaussianFilter2d~x","out[undefined]":"gaussianFilter2d~out.undefined]","y":"gaussianFilter2d~y","out[undefined][undefined]":"gaussianFilter2d~out.undefined][undefined]"}},"undocumented":true,"name":"gaussianFilter2d","longname":"gaussianFilter2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Create predefined 2-D filter\n*\n* `h = fspecial(type, parameters)` accepts the filter specified by type plus additional modifying\n* parameters particular to the type of filter chosen. If you omit these arguments, fspecial uses\n* default values for the parameters.\n*\n* This method mimics Matlab's `fspecial2` method with `type = 'gaussian'`. `hsize` cannot be a\n* vector (unlike Matlab's implementation), only a Number is accepted.\n*\n* `h = fspecial('gaussian', hsize, sigma)` returns a rotationally symmetric Gaussian lowpass filter\n* of size `hsize` with standard deviation sigma (positive). In this implementation `hsize` will\n* always be a scalar, which will result in `h` being a square matrix.\n*\n* The gaussian logic follows: hg(hsize) = e^(-2*hsize^2 / 2σ^2)\n*\n* @example\n*   fspecial('gaussian', 3, 1.5) === [\n*     [0.094742, 0.118318, 0.094742],\n*     [0.118318, 0.147761, 0.118318],\n*     [0.094742, 0.118318, 0.094742]\n*   ];\n*\n* @method fspecial\n* @param {String} [type='gaussian'] - The type of 2D filter to create (coerced to 'gaussian')\n* @param {Number} [hsize=3] - The length of the filter\n* @param {Number} [σ=1.5] - The filter sigma value\n* @returns {Array.<Array.<Number>>} c - Returns the central part of the convolution of the same\n* size as `a`.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1379,2731],"filename":"fspecial.js","lineno":53,"path":"/src/matlab","code":{}},"description":"Create predefined 2-D filter\n\n`h = fspecial(type, parameters)` accepts the filter specified by type plus additional modifying\nparameters particular to the type of filter chosen. If you omit these arguments, fspecial uses\ndefault values for the parameters.\n\nThis method mimics Matlab's `fspecial2` method with `type = 'gaussian'`. `hsize` cannot be a\nvector (unlike Matlab's implementation), only a Number is accepted.\n\n`h = fspecial('gaussian', hsize, sigma)` returns a rotationally symmetric Gaussian lowpass filter\nof size `hsize` with standard deviation sigma (positive). In this implementation `hsize` will\nalways be a scalar, which will result in `h` being a square matrix.\n\nThe gaussian logic follows: hg(hsize) = e^(-2*hsize^2 / 2σ^2)","examples":["fspecial('gaussian', 3, 1.5) === [\n    [0.094742, 0.118318, 0.094742],\n    [0.118318, 0.147761, 0.118318],\n    [0.094742, 0.118318, 0.094742]\n  ];"],"kind":"function","name":"fspecial","params":[{"type":{"names":["String"]},"optional":true,"defaultvalue":"'gaussian'","description":"The type of 2D filter to create (coerced to 'gaussian')","name":"type"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":3,"description":"The length of the filter","name":"hsize"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":1.5,"description":"The filter sigma value","name":"σ"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"c - Returns the central part of the convolution of the same\nsize as `a`."}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.fspecial"},{"comment":"/**\n* Create predefined 2-D filter\n*\n* `h = fspecial(type, parameters)` accepts the filter specified by type plus additional modifying\n* parameters particular to the type of filter chosen. If you omit these arguments, fspecial uses\n* default values for the parameters.\n*\n* This method mimics Matlab's `fspecial2` method with `type = 'gaussian'`. `hsize` cannot be a\n* vector (unlike Matlab's implementation), only a Number is accepted.\n*\n* `h = fspecial('gaussian', hsize, sigma)` returns a rotationally symmetric Gaussian lowpass filter\n* of size `hsize` with standard deviation sigma (positive). In this implementation `hsize` will\n* always be a scalar, which will result in `h` being a square matrix.\n*\n* The gaussian logic follows: hg(hsize) = e^(-2*hsize^2 / 2σ^2)\n*\n* @example\n*   fspecial('gaussian', 3, 1.5) === [\n*     [0.094742, 0.118318, 0.094742],\n*     [0.118318, 0.147761, 0.118318],\n*     [0.094742, 0.118318, 0.094742]\n*   ];\n*\n* @method fspecial\n* @param {String} [type='gaussian'] - The type of 2D filter to create (coerced to 'gaussian')\n* @param {Number} [hsize=3] - The length of the filter\n* @param {Number} [σ=1.5] - The filter sigma value\n* @returns {Array.<Array.<Number>>} c - Returns the central part of the convolution of the same\n* size as `a`.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[2732,2957],"filename":"fspecial.js","lineno":86,"path":"/src/matlab","code":{"id":"astnode100001070","name":"fspecial","type":"FunctionDeclaration","paramnames":["type","hsize","σ"]},"vars":{"hsize":"fspecial~hsize","pos":"fspecial~pos","gauss":"fspecial~gauss","total":"fspecial~total"}},"undocumented":true,"name":"fspecial","longname":"fspecial","kind":"function","scope":"global","params":[]},{"comment":"/**\n* `B = imfilter(A,f)` filters a 2-dimensional array `A` with the 2-dimensional filter `f`. The\n* array `A`. The result `B` has the same size as `A`.\n*\n* `imfilter` computes each element of the output, `B`. If `A` is an integer, `imfilter` will not\n* truncates the output elements that exceed the range, and it will not rounds fractional values.\n*\n* This method mimics Matlab's `imfilter` method with `padval = 'symmetric'` without integer\n* rounding. No other options have been implemented and, if set, they will be ignored.\n*\n* @method imfilter\n* @param {Array.<Array.<Number>>} A - The target matrix\n* @param {Array.<Array.<Number>>} f - The filter to apply\n* @param {String} [pad=\"symmetric\"] - The type of padding. Only \"symmetric\" is implemented\n* @param {String} [resSize=\"same\"] - The format to use for the filter size. Valid values are:\n* \"same\", \"valid\" and \"full\"\n* @returns {Array.<Array.<Number>>} B - The filtered array\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[159,1162],"filename":"imfilter.js","lineno":6,"path":"/src/matlab","code":{}},"description":"`B = imfilter(A,f)` filters a 2-dimensional array `A` with the 2-dimensional filter `f`. The\narray `A`. The result `B` has the same size as `A`.\n\n`imfilter` computes each element of the output, `B`. If `A` is an integer, `imfilter` will not\ntruncates the output elements that exceed the range, and it will not rounds fractional values.\n\nThis method mimics Matlab's `imfilter` method with `padval = 'symmetric'` without integer\nrounding. No other options have been implemented and, if set, they will be ignored.","kind":"function","name":"imfilter","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The target matrix","name":"A"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The filter to apply","name":"f"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"symmetric\"","description":"The type of padding. Only \"symmetric\" is implemented","name":"pad"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"\"same\"","description":"The format to use for the filter size. Valid values are:\n\"same\", \"valid\" and \"full\"","name":"resSize"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"B - The filtered array"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.imfilter"},{"comment":"/**\n* `B = imfilter(A,f)` filters a 2-dimensional array `A` with the 2-dimensional filter `f`. The\n* array `A`. The result `B` has the same size as `A`.\n*\n* `imfilter` computes each element of the output, `B`. If `A` is an integer, `imfilter` will not\n* truncates the output elements that exceed the range, and it will not rounds fractional values.\n*\n* This method mimics Matlab's `imfilter` method with `padval = 'symmetric'` without integer\n* rounding. No other options have been implemented and, if set, they will be ignored.\n*\n* @method imfilter\n* @param {Array.<Array.<Number>>} A - The target matrix\n* @param {Array.<Array.<Number>>} f - The filter to apply\n* @param {String} [pad=\"symmetric\"] - The type of padding. Only \"symmetric\" is implemented\n* @param {String} [resSize=\"same\"] - The format to use for the filter size. Valid values are:\n* \"same\", \"valid\" and \"full\"\n* @returns {Array.<Array.<Number>>} B - The filtered array\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1163,1552],"filename":"imfilter.js","lineno":27,"path":"/src/matlab","code":{"id":"astnode100001155","name":"imfilter","type":"FunctionDeclaration","paramnames":["A","f","pad","resSize"]},"vars":{"fcols":"imfilter~fcols","frows":"imfilter~frows","A":"imfilter~A","x":"imfilter~x","resSize":"imfilter~resSize"}},"undocumented":true,"name":"imfilter","longname":"imfilter","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Create a matrix with each cell with the value of `num`\n*\n* @method numbers\n* @param {Number} m - The number of rows\n* @param {Number} n - The number of columns\n* @param {Number} num - The value to set on each cell\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of `num`\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[0,344],"filename":"numbers.js","lineno":1,"path":"/src/matlab/internal","code":{}},"description":"Create a matrix with each cell with the value of `num`","kind":"function","name":"numbers","params":[{"type":{"names":["Number"]},"description":"The number of rows","name":"m"},{"type":{"names":["Number"]},"description":"The number of columns","name":"n"},{"type":{"names":["Number"]},"description":"The value to set on each cell","name":"num"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"B - An n-by-m matrix of `num`"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.numbers"},{"comment":"/**\n* Create a matrix with each cell with the value of `num`\n*\n* @method numbers\n* @param {Number} m - The number of rows\n* @param {Number} n - The number of columns\n* @param {Number} num - The value to set on each cell\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of `num`\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[345,512],"filename":"numbers.js","lineno":13,"path":"/src/matlab/internal","code":{"id":"astnode100001261","name":"numbers","type":"FunctionDeclaration","paramnames":["m","n","num"]},"vars":{"out":"numbers~out","x":"numbers~x","out[undefined]":"numbers~out.undefined]","y":"numbers~y","out[undefined][undefined]":"numbers~out.undefined][undefined]"}},"undocumented":true,"name":"numbers","longname":"numbers","kind":"function","scope":"global","params":[]},{"comment":"/**\n* `M = mod(X,Y)` returns the remainder `X - Y.*floor(X./Y)` for nonzero `Y`, and returns `X`\n* otherwise. `mod(X,Y)` always differs from `X` by a multiple of `Y`.\n*\n* So long as operands `X` and `Y` are of the same sign, the function `mod(X,Y)` returns the same\n* result as does `rem(X,Y)`. However, for positive `X` and `Y`, `mod(-x,y) = rem(-x,y)+y`.\n*\n* The mod function is useful for congruence relationships: x and y are congruent (mod m) if and\n* only if mod(x,m) == mod(y,m).\n*\n* This method mimics Matlab's `mod` method\n*\n* @method mod\n* @param {Number} x - The dividend\n* @param {Numvwe} y - The divisor\n* @returns {Number} M - Returns the signed remainder after division.\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[0,752],"filename":"mod.js","lineno":1,"path":"/src/matlab","code":{}},"description":"`M = mod(X,Y)` returns the remainder `X - Y.*floor(X./Y)` for nonzero `Y`, and returns `X`\notherwise. `mod(X,Y)` always differs from `X` by a multiple of `Y`.\n\nSo long as operands `X` and `Y` are of the same sign, the function `mod(X,Y)` returns the same\nresult as does `rem(X,Y)`. However, for positive `X` and `Y`, `mod(-x,y) = rem(-x,y)+y`.\n\nThe mod function is useful for congruence relationships: x and y are congruent (mod m) if and\nonly if mod(x,m) == mod(y,m).\n\nThis method mimics Matlab's `mod` method","kind":"function","name":"mod","params":[{"type":{"names":["Number"]},"description":"The dividend","name":"x"},{"type":{"names":["Numvwe"]},"description":"The divisor","name":"y"}],"returns":[{"type":{"names":["Number"]},"description":"M - Returns the signed remainder after division."}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.mod"},{"comment":"/**\n* `M = mod(X,Y)` returns the remainder `X - Y.*floor(X./Y)` for nonzero `Y`, and returns `X`\n* otherwise. `mod(X,Y)` always differs from `X` by a multiple of `Y`.\n*\n* So long as operands `X` and `Y` are of the same sign, the function `mod(X,Y)` returns the same\n* result as does `rem(X,Y)`. However, for positive `X` and `Y`, `mod(-x,y) = rem(-x,y)+y`.\n*\n* The mod function is useful for congruence relationships: x and y are congruent (mod m) if and\n* only if mod(x,m) == mod(y,m).\n*\n* This method mimics Matlab's `mod` method\n*\n* @method mod\n* @param {Number} x - The dividend\n* @param {Numvwe} y - The divisor\n* @returns {Number} M - Returns the signed remainder after division.\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[753,812],"filename":"mod.js","lineno":21,"path":"/src/matlab","code":{"id":"astnode100001318","name":"mod","type":"FunctionDeclaration","paramnames":["x","y"]}},"undocumented":true,"name":"mod","longname":"mod","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Create a matrix of all ones\n*\n* This method mimics Matlab's `ones` method\n*\n* @method ones\n* @param {Number} m - The number of rows\n* @param {Number} [n=m] - The number of columns\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of ones\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[52,361],"filename":"ones.js","lineno":3,"path":"/src/matlab","code":{}},"description":"Create a matrix of all ones\n\nThis method mimics Matlab's `ones` method","kind":"function","name":"ones","params":[{"type":{"names":["Number"]},"description":"The number of rows","name":"m"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":"m","description":"The number of columns","name":"n"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"B - An n-by-m matrix of ones"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.ones"},{"comment":"/**\n* Create a matrix of all ones\n*\n* This method mimics Matlab's `ones` method\n*\n* @method ones\n* @param {Number} m - The number of rows\n* @param {Number} [n=m] - The number of columns\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of ones\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[362,415],"filename":"ones.js","lineno":16,"path":"/src/matlab","code":{"id":"astnode100001352","name":"ones","type":"FunctionDeclaration","paramnames":["m","n"]}},"undocumented":true,"name":"ones","longname":"ones","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Mirrors a matrix horizontally.\n*\n* @example\n* 1 2 3 4  becomes:  4 3 2 1\n* 5 6 7 8            8 7 6 5\n*\n* @method mirrorHorizonal\n* @param {Array.<Array.<Number>>} b - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[73,385],"filename":"padarray.js","lineno":4,"path":"/src/matlab","code":{}},"description":"Mirrors a matrix horizontally.","examples":["1 2 3 4  becomes:  4 3 2 1\n5 6 7 8            8 7 6 5"],"kind":"function","name":"mirrorHorizonal","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"b"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The rotated matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.mirrorHorizonal"},{"comment":"/**\n* Mirrors a matrix horizontally.\n*\n* @example\n* 1 2 3 4  becomes:  4 3 2 1\n* 5 6 7 8            8 7 6 5\n*\n* @method mirrorHorizonal\n* @param {Array.<Array.<Number>>} b - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[386,621],"filename":"padarray.js","lineno":18,"path":"/src/matlab","code":{"id":"astnode100001390","name":"mirrorHorizonal","type":"FunctionDeclaration","paramnames":["b"]},"vars":{"out":"mirrorHorizonal~out","row":"mirrorHorizonal~row","col":"mirrorHorizonal~col","x":"mirrorHorizonal~x","out[undefined]":"mirrorHorizonal~out.undefined]","y":"mirrorHorizonal~y","out[undefined][undefined]":"mirrorHorizonal~out.undefined][undefined]"}},"undocumented":true,"name":"mirrorHorizonal","longname":"mirrorHorizonal","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Mirrors a matrix vertically.\n*\n* @example\n* 1 2 3 4  becomes:  9 0 F E\n* 5 6 7 8            5 6 7 8\n* 9 0 F E            1 2 3 4\n*\n* @method mirrorVertical\n* @param {Array.<Array.<Number>>} b - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[623,962],"filename":"padarray.js","lineno":33,"path":"/src/matlab","code":{}},"description":"Mirrors a matrix vertically.","examples":["1 2 3 4  becomes:  9 0 F E\n5 6 7 8            5 6 7 8\n9 0 F E            1 2 3 4"],"kind":"function","name":"mirrorVertical","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"b"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The rotated matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.mirrorVertical"},{"comment":"/**\n* Mirrors a matrix vertically.\n*\n* @example\n* 1 2 3 4  becomes:  9 0 F E\n* 5 6 7 8            5 6 7 8\n* 9 0 F E            1 2 3 4\n*\n* @method mirrorVertical\n* @param {Array.<Array.<Number>>} b - The input matrix\n* @returns {Array.<Array.<Number>>} out - The rotated matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[963,1197],"filename":"padarray.js","lineno":48,"path":"/src/matlab","code":{"id":"astnode100001458","name":"mirrorVertical","type":"FunctionDeclaration","paramnames":["b"]},"vars":{"out":"mirrorVertical~out","row":"mirrorVertical~row","col":"mirrorVertical~col","x":"mirrorVertical~x","out[undefined]":"mirrorVertical~out.undefined]","y":"mirrorVertical~y","out[undefined][undefined]":"mirrorVertical~out.undefined][undefined]"}},"undocumented":true,"name":"mirrorVertical","longname":"mirrorVertical","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Concatenates 2 matrices of the same height horizontally.\n*\n* @example\n* 1 2   3 4  becomes:  1 2 3 4\n* 5 6   7 8            5 6 7 8\n*\n* @method concatHorizontal\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @returns {Array.<Array.<Number>>} out - The combined matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1199,1600],"filename":"padarray.js","lineno":63,"path":"/src/matlab","code":{}},"description":"Concatenates 2 matrices of the same height horizontally.","examples":["1 2   3 4  becomes:  1 2 3 4\n5 6   7 8            5 6 7 8"],"kind":"function","name":"concatHorizontal","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first matrix","name":"a"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second matrix","name":"b"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The combined matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.concatHorizontal"},{"comment":"/**\n* Concatenates 2 matrices of the same height horizontally.\n*\n* @example\n* 1 2   3 4  becomes:  1 2 3 4\n* 5 6   7 8            5 6 7 8\n*\n* @method concatHorizontal\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @returns {Array.<Array.<Number>>} out - The combined matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1601,1877],"filename":"padarray.js","lineno":78,"path":"/src/matlab","code":{"id":"astnode100001526","name":"concatHorizontal","type":"FunctionDeclaration","paramnames":["a","b"]},"vars":{"out":"concatHorizontal~out","x":"concatHorizontal~x","out[undefined]":"concatHorizontal~out.undefined]","y":"concatHorizontal~y","out[undefined][undefined]":"concatHorizontal~out.undefined][undefined]"}},"undocumented":true,"name":"concatHorizontal","longname":"concatHorizontal","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Concatenates 2 matrices of the same height vertically.\n*\n* @example\n* 1 2   3 4  becomes:  1 2\n* 5 6   7 8            5 6\n*                      3 4\n*                      7 8\n*\n* @method concatVertical\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @returns {Array.<Array.<Number>>} out - The combined matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1879,2324],"filename":"padarray.js","lineno":93,"path":"/src/matlab","code":{}},"description":"Concatenates 2 matrices of the same height vertically.","examples":["1 2   3 4  becomes:  1 2\n5 6   7 8            5 6\n                     3 4\n                     7 8"],"kind":"function","name":"concatVertical","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The first matrix","name":"a"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The second matrix","name":"b"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The combined matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.concatVertical"},{"comment":"/**\n* Concatenates 2 matrices of the same height vertically.\n*\n* @example\n* 1 2   3 4  becomes:  1 2\n* 5 6   7 8            5 6\n*                      3 4\n*                      7 8\n*\n* @method concatVertical\n* @param {Array.<Array.<Number>>} a - The first matrix\n* @param {Array.<Array.<Number>>} b - The second matrix\n* @returns {Array.<Array.<Number>>} out - The combined matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[2325,2615],"filename":"padarray.js","lineno":110,"path":"/src/matlab","code":{"id":"astnode100001616","name":"concatVertical","type":"FunctionDeclaration","paramnames":["a","b"]},"vars":{"out":"concatVertical~out","y":"concatVertical~y","x":"concatVertical~x","out[undefined][undefined]":"concatVertical~out.undefined][undefined]"}},"undocumented":true,"name":"concatVertical","longname":"concatVertical","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Adds 2 * `pad` cells to a matrix horizontally. The values used are mirrored from the input\n* matrix.\n*\n* @example\n* with padding 1:\n* 1 2 3 4   becomes:  1 1 2 3 4 4\n* 5 6 7 8             5 5 6 7 8 8\n*\n* With padding 2:\n* 1 2 3 4   becomes:  2 1 1 2 3 4 4 3\n* 5 6 7 8             6 5 5 6 7 8 8 7\n*\n* @method padHorizontal\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (left / right)\n* @returns {Array.<Array.<Number>>} out - The padded matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[2617,3207],"filename":"padarray.js","lineno":124,"path":"/src/matlab","code":{}},"description":"Adds 2 * `pad` cells to a matrix horizontally. The values used are mirrored from the input\nmatrix.","examples":["with padding 1:\n1 2 3 4   becomes:  1 1 2 3 4 4\n5 6 7 8             5 5 6 7 8 8\n\nWith padding 2:\n1 2 3 4   becomes:  2 1 1 2 3 4 4 3\n5 6 7 8             6 5 5 6 7 8 8 7"],"kind":"function","name":"padHorizontal","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"A"},{"type":{"names":["Number"]},"description":"The nummber of cells to add to each side (left / right)","name":"pad"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The padded matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.padHorizontal"},{"comment":"/**\n* Adds 2 * `pad` cells to a matrix horizontally. The values used are mirrored from the input\n* matrix.\n*\n* @example\n* with padding 1:\n* 1 2 3 4   becomes:  1 1 2 3 4 4\n* 5 6 7 8             5 5 6 7 8 8\n*\n* With padding 2:\n* 1 2 3 4   becomes:  2 1 1 2 3 4 4 3\n* 5 6 7 8             6 5 5 6 7 8 8 7\n*\n* @method padHorizontal\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (left / right)\n* @returns {Array.<Array.<Number>>} out - The padded matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[3208,3554],"filename":"padarray.js","lineno":145,"path":"/src/matlab","code":{"id":"astnode100001709","name":"padHorizontal","type":"FunctionDeclaration","paramnames":["A","pad"]},"vars":{"out":"padHorizontal~out","mirrored":"padHorizontal~mirrored","mirrorCol":"padHorizontal~mirrorCol","col":"padHorizontal~col","x":"padHorizontal~x","out[undefined]":"padHorizontal~out.undefined]","y":"padHorizontal~y","out[undefined][undefined]":"padHorizontal~out.undefined][undefined]"}},"undocumented":true,"name":"padHorizontal","longname":"padHorizontal","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Adds 2 * `pad` cells to a matrix vertically. The values used are mirrored from the input\n* matrix.\n*\n* @example\n* with padding 1:\n* 1 2 3 4   becomes:  1 2 3 4\n* 5 6 7 8             1 2 3 4\n*                     5 6 7 8\n*                     5 6 7 8\n* With padding 2:\n* 1 2 3 4   becomes:  5 6 7 8\n* 5 6 7 8             1 2 3 4\n*                     1 2 3 4\n*                     5 6 7 8\n*                     5 6 7 8\n*                     1 2 3 4\n*\n* @method padVertical\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (top / bottom)\n* @returns {Array.<Array.<Number>>} out - The padded matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[3556,4301],"filename":"padarray.js","lineno":161,"path":"/src/matlab","code":{}},"description":"Adds 2 * `pad` cells to a matrix vertically. The values used are mirrored from the input\nmatrix.","examples":["with padding 1:\n1 2 3 4   becomes:  1 2 3 4\n5 6 7 8             1 2 3 4\n                    5 6 7 8\n                    5 6 7 8\nWith padding 2:\n1 2 3 4   becomes:  5 6 7 8\n5 6 7 8             1 2 3 4\n                    1 2 3 4\n                    5 6 7 8\n                    5 6 7 8\n                    1 2 3 4"],"kind":"function","name":"padVertical","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"A"},{"type":{"names":["Number"]},"description":"The nummber of cells to add to each side (top / bottom)","name":"pad"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The padded matrix"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.padVertical"},{"comment":"/**\n* Adds 2 * `pad` cells to a matrix vertically. The values used are mirrored from the input\n* matrix.\n*\n* @example\n* with padding 1:\n* 1 2 3 4   becomes:  1 2 3 4\n* 5 6 7 8             1 2 3 4\n*                     5 6 7 8\n*                     5 6 7 8\n* With padding 2:\n* 1 2 3 4   becomes:  5 6 7 8\n* 5 6 7 8             1 2 3 4\n*                     1 2 3 4\n*                     5 6 7 8\n*                     5 6 7 8\n*                     1 2 3 4\n*\n* @method padVertical\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (top / bottom)\n* @returns {Array.<Array.<Number>>} out - The padded matrix\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[4302,4645],"filename":"padarray.js","lineno":187,"path":"/src/matlab","code":{"id":"astnode100001795","name":"padVertical","type":"FunctionDeclaration","paramnames":["A","pad"]},"vars":{"out":"padVertical~out","mirrored":"padVertical~mirrored","mirrorRow":"padVertical~mirrorRow","row":"padVertical~row","x":"padVertical~x","out[undefined]":"padVertical~out.undefined]","y":"padVertical~y","out[undefined][undefined]":"padVertical~out.undefined][undefined]"}},"undocumented":true,"name":"padVertical","longname":"padVertical","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Implements `padarray` matching Matlab only for the case where:\n*\n* `padRow <= A.length && padCol <= A[0].length`\n*\n* For an input Matrix `E`, we add padding A, B, C, D, F, G, H and I of size `padRow` and `padCol`\n* where appropriate. For instance, given E:\n*\n* 1 2 3\n* 4 5 6\n*\n* Placed in a padding matrix like this:\n*\n* | A | B | C |\n* |---|---|---|\n* | D | E | F |\n* |---|---|---|\n* | G | H | I |\n*\n* with padding [1, 1] it becomes:\n*\n* | 1 | 1 2 3 | 3 |\n* |---|-------|---|\n* | 1 | 1 2 3 | 3 |\n* | 4 | 4 5 6 | 6 |\n* |---|-------|---|\n* | 4 | 4 5 6 | 6 |\n*\n* with padding [2, 3] it becomes:\n*\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n* |-------|-------|-------|\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* |-------|-------|-------|\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n*\n* @method fastPadding\n* @param {Array.<Array.<Number>>} out - The initialized, but empty, output padded matrix\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (top / bottom)\n* @param {Array} padding - An array where the first element is the padding to apply to each side on\n* each row and the second one is the vertical padding for each side of each column\n* @returns {Array.<Array.<Number>>} out - An array with padding added on each side.\n* @private\n* @memberOf matlab\n* @since 0.0.4\n*/","meta":{"range":[4647,6083],"filename":"padarray.js","lineno":202,"path":"/src/matlab","code":{}},"description":"Implements `padarray` matching Matlab only for the case where:\n\n`padRow <= A.length && padCol <= A[0].length`\n\nFor an input Matrix `E`, we add padding A, B, C, D, F, G, H and I of size `padRow` and `padCol`\nwhere appropriate. For instance, given E:\n\n1 2 3\n4 5 6\n\nPlaced in a padding matrix like this:\n\n| A | B | C |\n|---|---|---|\n| D | E | F |\n|---|---|---|\n| G | H | I |\n\nwith padding [1, 1] it becomes:\n\n| 1 | 1 2 3 | 3 |\n|---|-------|---|\n| 1 | 1 2 3 | 3 |\n| 4 | 4 5 6 | 6 |\n|---|-------|---|\n| 4 | 4 5 6 | 6 |\n\nwith padding [2, 3] it becomes:\n\n| 6 5 4 | 4 5 6 | 6 5 4 |\n| 3 2 1 | 1 2 3 | 3 2 1 |\n|-------|-------|-------|\n| 3 2 1 | 1 2 3 | 3 2 1 |\n| 6 5 4 | 4 5 6 | 6 5 4 |\n|-------|-------|-------|\n| 6 5 4 | 4 5 6 | 6 5 4 |\n| 3 2 1 | 1 2 3 | 3 2 1 |","kind":"function","name":"fastPadding","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The initialized, but empty, output padded matrix","name":"out"},{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"A"},{"type":{"names":["Number"]},"description":"The nummber of cells to add to each side (top / bottom)","name":"pad"},{"type":{"names":["Array"]},"description":"An array where the first element is the padding to apply to each side on\neach row and the second one is the vertical padding for each side of each column","name":"padding"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - An array with padding added on each side."}],"access":"private","memberof":"matlab","since":"0.0.4","scope":"static","longname":"matlab.fastPadding"},{"comment":"/**\n* Implements `padarray` matching Matlab only for the case where:\n*\n* `padRow <= A.length && padCol <= A[0].length`\n*\n* For an input Matrix `E`, we add padding A, B, C, D, F, G, H and I of size `padRow` and `padCol`\n* where appropriate. For instance, given E:\n*\n* 1 2 3\n* 4 5 6\n*\n* Placed in a padding matrix like this:\n*\n* | A | B | C |\n* |---|---|---|\n* | D | E | F |\n* |---|---|---|\n* | G | H | I |\n*\n* with padding [1, 1] it becomes:\n*\n* | 1 | 1 2 3 | 3 |\n* |---|-------|---|\n* | 1 | 1 2 3 | 3 |\n* | 4 | 4 5 6 | 6 |\n* |---|-------|---|\n* | 4 | 4 5 6 | 6 |\n*\n* with padding [2, 3] it becomes:\n*\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n* |-------|-------|-------|\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* |-------|-------|-------|\n* | 6 5 4 | 4 5 6 | 6 5 4 |\n* | 3 2 1 | 1 2 3 | 3 2 1 |\n*\n* @method fastPadding\n* @param {Array.<Array.<Number>>} out - The initialized, but empty, output padded matrix\n* @param {Array.<Array.<Number>>} A - The input matrix\n* @param {Number} pad - The nummber of cells to add to each side (top / bottom)\n* @param {Array} padding - An array where the first element is the padding to apply to each side on\n* each row and the second one is the vertical padding for each side of each column\n* @returns {Array.<Array.<Number>>} out - An array with padding added on each side.\n* @private\n* @memberOf matlab\n* @since 0.0.4\n*/","meta":{"range":[6084,7392],"filename":"padarray.js","lineno":252,"path":"/src/matlab","code":{"id":"astnode100001881","name":"fastPadding","type":"FunctionDeclaration","paramnames":["out","A",""]},"vars":{"x":"fastPadding~x","y":"fastPadding~y","out[undefined][undefined]":null}},"undocumented":true,"name":"fastPadding","longname":"fastPadding","kind":"function","scope":"global","params":[]},{"comment":"/**\n* `B = padarray(A,padsize)` pads array `A`. padsize is a vector of nonnegative integers that\n* specifies both, the amount of padding to add and the dimension along which to add it. The value\n* of an element in the vector specifies the amount of padding to add. The order of the element in\n* the vector specifies the dimension along which to add the padding.\n*\n* For example, a padsize value of `[2 3]` means add 2 elements of padding along the first dimension\n* and 3 elements of padding along the second dimension.\n*\n* By default, paddarray adds padding before the first element and after the last element along the\n* specified dimension.\n*\n* `B = padarray(A,padsize,padval)` pads array `A` where `padval` specifies the value to use as the\n* pad value. `padval` can only be 'symmetric' for this implementation of `padarray` which will pad\n* the array with mirror reflections of itself.\n*\n* This method mimics Matlab's `padarray` method with `padval = 'symmetric'` and\n* `direction = 'both'`. No other options have been implemented and, if set, they will be ignored.\n*\n* This method has been unfolded for performance and switched to simple for loops. Readability\n* suffers.\n*\n* @method padarray\n* @param {Array.<Array.<Number>>} A - The target matrix\n* @param {Array} padding - An array where the first element is the padding to apply to each side on\n* each row and the second one is the vertical padding for each side of each column\n* @param {String} [padval='symmetric'] - The type of padding to apply (coerced to 'symmetric')\n* @param {String} [direction='both'] - The direction to which apply padding (coerced to 'both')\n* @returns {Array.<Array.<Number>>} c - An array with padding added on each side.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[7394,9183],"filename":"padarray.js","lineno":298,"path":"/src/matlab","code":{}},"description":"`B = padarray(A,padsize)` pads array `A`. padsize is a vector of nonnegative integers that\nspecifies both, the amount of padding to add and the dimension along which to add it. The value\nof an element in the vector specifies the amount of padding to add. The order of the element in\nthe vector specifies the dimension along which to add the padding.\n\nFor example, a padsize value of `[2 3]` means add 2 elements of padding along the first dimension\nand 3 elements of padding along the second dimension.\n\nBy default, paddarray adds padding before the first element and after the last element along the\nspecified dimension.\n\n`B = padarray(A,padsize,padval)` pads array `A` where `padval` specifies the value to use as the\npad value. `padval` can only be 'symmetric' for this implementation of `padarray` which will pad\nthe array with mirror reflections of itself.\n\nThis method mimics Matlab's `padarray` method with `padval = 'symmetric'` and\n`direction = 'both'`. No other options have been implemented and, if set, they will be ignored.\n\nThis method has been unfolded for performance and switched to simple for loops. Readability\nsuffers.","kind":"function","name":"padarray","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The target matrix","name":"A"},{"type":{"names":["Array"]},"description":"An array where the first element is the padding to apply to each side on\neach row and the second one is the vertical padding for each side of each column","name":"padding"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'symmetric'","description":"The type of padding to apply (coerced to 'symmetric')","name":"padval"},{"type":{"names":["String"]},"optional":true,"defaultvalue":"'both'","description":"The direction to which apply padding (coerced to 'both')","name":"direction"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"c - An array with padding added on each side."}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.padarray"},{"comment":"/**\n* `B = padarray(A,padsize)` pads array `A`. padsize is a vector of nonnegative integers that\n* specifies both, the amount of padding to add and the dimension along which to add it. The value\n* of an element in the vector specifies the amount of padding to add. The order of the element in\n* the vector specifies the dimension along which to add the padding.\n*\n* For example, a padsize value of `[2 3]` means add 2 elements of padding along the first dimension\n* and 3 elements of padding along the second dimension.\n*\n* By default, paddarray adds padding before the first element and after the last element along the\n* specified dimension.\n*\n* `B = padarray(A,padsize,padval)` pads array `A` where `padval` specifies the value to use as the\n* pad value. `padval` can only be 'symmetric' for this implementation of `padarray` which will pad\n* the array with mirror reflections of itself.\n*\n* This method mimics Matlab's `padarray` method with `padval = 'symmetric'` and\n* `direction = 'both'`. No other options have been implemented and, if set, they will be ignored.\n*\n* This method has been unfolded for performance and switched to simple for loops. Readability\n* suffers.\n*\n* @method padarray\n* @param {Array.<Array.<Number>>} A - The target matrix\n* @param {Array} padding - An array where the first element is the padding to apply to each side on\n* each row and the second one is the vertical padding for each side of each column\n* @param {String} [padval='symmetric'] - The type of padding to apply (coerced to 'symmetric')\n* @param {String} [direction='both'] - The direction to which apply padding (coerced to 'both')\n* @returns {Array.<Array.<Number>>} c - An array with padding added on each side.\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[9184,9666],"filename":"padarray.js","lineno":331,"path":"/src/matlab","code":{"id":"astnode100002309","name":"padarray","type":"FunctionDeclaration","paramnames":["A",""]},"vars":{"c":"padarray~c","x":"padarray~x","c[undefined]":"padarray~c.undefined]"}},"undocumented":true,"name":"padarray","longname":"padarray","kind":"function","scope":"global","params":[]},{"comment":"/**\n* For an array of pixels of the form [r, g, b] it returns the equivalent grayscale color. These\n* values are not derived from ITU's recommendation of [0.2126, 0.7152, 0.0722] for [r, g, b] but on\n* Matlab's implementation of [0.2989, 0.5870, 0.1140]\n*\n* Note that values are rounded to ensure an exact match with the original results. I think\n* rounding them would NOT lead to higher accuracy since the exact values for RGB to grayscale\n* conversion are somewhat arbitrary (as examplified by the differences between ITU and Matlab).\n* ± 0.5 pixel differences won't be perceptible for the human eye and will have a small impact on\n* SSIM. Based on some sample data changes were of the order of 10^-3.\n*\n* @method luma\n* @param {Number[]} subpixels - The different pixels to use in the following order: r, g, b\n* @returns {Number} lumaValue - The value of the luminance for the [r,g,b] pixel\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[0,958],"filename":"rgb2gray.js","lineno":1,"path":"/src/matlab","code":{}},"description":"For an array of pixels of the form [r, g, b] it returns the equivalent grayscale color. These\nvalues are not derived from ITU's recommendation of [0.2126, 0.7152, 0.0722] for [r, g, b] but on\nMatlab's implementation of [0.2989, 0.5870, 0.1140]\n\nNote that values are rounded to ensure an exact match with the original results. I think\nrounding them would NOT lead to higher accuracy since the exact values for RGB to grayscale\nconversion are somewhat arbitrary (as examplified by the differences between ITU and Matlab).\n± 0.5 pixel differences won't be perceptible for the human eye and will have a small impact on\nSSIM. Based on some sample data changes were of the order of 10^-3.","kind":"function","name":"luma","params":[{"type":{"names":["Array.<Number>"]},"description":"The different pixels to use in the following order: r, g, b","name":"subpixels"}],"returns":[{"type":{"names":["Number"]},"description":"lumaValue - The value of the luminance for the [r,g,b] pixel"}],"access":"private","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.luma"},{"comment":"/**\n* For an array of pixels of the form [r, g, b] it returns the equivalent grayscale color. These\n* values are not derived from ITU's recommendation of [0.2126, 0.7152, 0.0722] for [r, g, b] but on\n* Matlab's implementation of [0.2989, 0.5870, 0.1140]\n*\n* Note that values are rounded to ensure an exact match with the original results. I think\n* rounding them would NOT lead to higher accuracy since the exact values for RGB to grayscale\n* conversion are somewhat arbitrary (as examplified by the differences between ITU and Matlab).\n* ± 0.5 pixel differences won't be perceptible for the human eye and will have a small impact on\n* SSIM. Based on some sample data changes were of the order of 10^-3.\n*\n* @method luma\n* @param {Number[]} subpixels - The different pixels to use in the following order: r, g, b\n* @returns {Number} lumaValue - The value of the luminance for the [r,g,b] pixel\n* @private\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[959,1048],"filename":"rgb2gray.js","lineno":19,"path":"/src/matlab","code":{"id":"astnode100002381","name":"luma","type":"FunctionDeclaration","paramnames":[""]}},"undocumented":true,"name":"luma","longname":"luma","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Converts a 3d matrix of [row, column, rgb] into a 2d one [row, column] where the value is the\n* grayscale equivalent of the rgb input.\n*\n* This method mimics Matlab's `rgb2gray` method\n*\n* @method rgb2gray\n* @param {Array.<Array.<Array.<Number>>>} mx - The input matrix\n* @returns {Array.<Array.<Number>>} grayscale - A 2d grayscale representation of the input image\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1050,1481],"filename":"rgb2gray.js","lineno":23,"path":"/src/matlab","code":{}},"description":"Converts a 3d matrix of [row, column, rgb] into a 2d one [row, column] where the value is the\ngrayscale equivalent of the rgb input.\n\nThis method mimics Matlab's `rgb2gray` method","kind":"function","name":"rgb2gray","params":[{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"The input matrix","name":"mx"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"grayscale - A 2d grayscale representation of the input image"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.rgb2gray"},{"comment":"/**\n* Converts a 3d matrix of [row, column, rgb] into a 2d one [row, column] where the value is the\n* grayscale equivalent of the rgb input.\n*\n* This method mimics Matlab's `rgb2gray` method\n*\n* @method rgb2gray\n* @param {Array.<Array.<Array.<Number>>>} mx - The input matrix\n* @returns {Array.<Array.<Number>>} grayscale - A 2d grayscale representation of the input image\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[1482,1685],"filename":"rgb2gray.js","lineno":36,"path":"/src/matlab","code":{"id":"astnode100002401","name":"rgb2gray","type":"FunctionDeclaration","paramnames":["mx"]},"vars":{"lumaMx":"rgb2gray~lumaMx","x":"rgb2gray~x","lumaMx[undefined]":"rgb2gray~lumaMx.undefined]","y":"rgb2gray~y","lumaMx[undefined][undefined]":"rgb2gray~lumaMx.undefined][undefined]"}},"undocumented":true,"name":"rgb2gray","longname":"rgb2gray","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Generates a matrix based on input `mx` but excluding items based on their modulo and their\n* position in the original matrix.\n*\n* It's a crude implementation of Matlab's `A(1:f:end,1:f:end)` syntax where the first parameter\n* is the matrix, the next one is an array describing the rows to skip [start position, every `f`\n* elements an end position] and the last one follows the same syntax for columns.\n*\n* @example\n* ```\n* img1(1:f:end,1:f:end)\n*\n* ```\n*\n* becomes:\n*\n* ```\n* skip2d(img1, [0, f, img1.length], [0, f, img1[0].length])\n* ```\n*\n* Note that the start index is 0 since, unlike Matlab's, arrays start at 0. Also, unlike in Matlab,\n* `f` must be an integer greater than or equal to 1.\n*\n* @method skip2d\n* @param {Array.<Array.<Number>>} h - The FIR filter\n* @returns {Array.<Array.<Number>>} X - The input matrix\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[0,906],"filename":"skip2d.js","lineno":1,"path":"/src/matlab","code":{}},"description":"Generates a matrix based on input `mx` but excluding items based on their modulo and their\nposition in the original matrix.\n\nIt's a crude implementation of Matlab's `A(1:f:end,1:f:end)` syntax where the first parameter\nis the matrix, the next one is an array describing the rows to skip [start position, every `f`\nelements an end position] and the last one follows the same syntax for columns.","examples":["```\nimg1(1:f:end,1:f:end)\n\n```\n\nbecomes:\n\n```\nskip2d(img1, [0, f, img1.length], [0, f, img1[0].length])\n```\n\nNote that the start index is 0 since, unlike Matlab's, arrays start at 0. Also, unlike in Matlab,\n`f` must be an integer greater than or equal to 1."],"kind":"function","name":"skip2d","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The FIR filter","name":"h"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"X - The input matrix"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.skip2d"},{"comment":"/**\n* Generates a matrix based on input `mx` but excluding items based on their modulo and their\n* position in the original matrix.\n*\n* It's a crude implementation of Matlab's `A(1:f:end,1:f:end)` syntax where the first parameter\n* is the matrix, the next one is an array describing the rows to skip [start position, every `f`\n* elements an end position] and the last one follows the same syntax for columns.\n*\n* @example\n* ```\n* img1(1:f:end,1:f:end)\n*\n* ```\n*\n* becomes:\n*\n* ```\n* skip2d(img1, [0, f, img1.length], [0, f, img1[0].length])\n* ```\n*\n* Note that the start index is 0 since, unlike Matlab's, arrays start at 0. Also, unlike in Matlab,\n* `f` must be an integer greater than or equal to 1.\n*\n* @method skip2d\n* @param {Array.<Array.<Number>>} h - The FIR filter\n* @returns {Array.<Array.<Number>>} X - The input matrix\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[907,1234],"filename":"skip2d.js","lineno":31,"path":"/src/matlab","code":{"id":"astnode100002468","name":"skip2d","type":"FunctionDeclaration","paramnames":["mx","",""]},"vars":{"out":"skip2d~out","x":"skip2d~x","out[undefined]":"skip2d~out.undefined]","y":"skip2d~y","out[undefined][undefined]":"skip2d~out.undefined][undefined]"}},"undocumented":true,"name":"skip2d","longname":"skip2d","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Crops the matrix and returns a window at position `[x,y]` of size `[xlen, ylen]` from the input\n* matrix\n*\n* @method sub\n* @param {Array.<Array.<Number>>} c - The input matrix\n* @param {Number} y - The starting y offset\n* @param {Number} ylen - The vertical size of the window\n* @param {Number} x - The starting x offset\n* @param {Number} xlen - The horizontal size of the window\n* @returns {Array.<Array.<Number>>} out - The generated subwindow from matrix `c`\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[0,528],"filename":"sub.js","lineno":1,"path":"/src/matlab","code":{}},"description":"Crops the matrix and returns a window at position `[x,y]` of size `[xlen, ylen]` from the input\nmatrix","kind":"function","name":"sub","params":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"The input matrix","name":"c"},{"type":{"names":["Number"]},"description":"The starting y offset","name":"y"},{"type":{"names":["Number"]},"description":"The vertical size of the window","name":"ylen"},{"type":{"names":["Number"]},"description":"The starting x offset","name":"x"},{"type":{"names":["Number"]},"description":"The horizontal size of the window","name":"xlen"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"out - The generated subwindow from matrix `c`"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.sub"},{"comment":"/**\n* Crops the matrix and returns a window at position `[x,y]` of size `[xlen, ylen]` from the input\n* matrix\n*\n* @method sub\n* @param {Array.<Array.<Number>>} c - The input matrix\n* @param {Number} y - The starting y offset\n* @param {Number} ylen - The vertical size of the window\n* @param {Number} x - The starting x offset\n* @param {Number} xlen - The horizontal size of the window\n* @returns {Array.<Array.<Number>>} out - The generated subwindow from matrix `c`\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[529,721],"filename":"sub.js","lineno":16,"path":"/src/matlab","code":{"id":"astnode100002545","name":"sub","type":"FunctionDeclaration","paramnames":["c","y","ylen","x","xlen"]},"vars":{"out":"sub~out","i":"sub~i","out[undefined]":"sub~out.undefined]","j":"sub~j","out[undefined][undefined]":"sub~out.undefined][undefined]"}},"undocumented":true,"name":"sub","longname":"sub","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Create a matrix of all zeros\n*\n* This method mimics Matlab's `zeros` method\n*\n* @method zeros\n* @param {Number} m - The number of rows\n* @param {Number} [n=m] - The number of columns\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of zeros\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[52,365],"filename":"zeros.js","lineno":3,"path":"/src/matlab","code":{}},"description":"Create a matrix of all zeros\n\nThis method mimics Matlab's `zeros` method","kind":"function","name":"zeros","params":[{"type":{"names":["Number"]},"description":"The number of rows","name":"m"},{"type":{"names":["Number"]},"optional":true,"defaultvalue":"m","description":"The number of columns","name":"n"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"B - An n-by-m matrix of zeros"}],"access":"public","memberof":"matlab","since":"0.0.2","scope":"static","longname":"matlab.zeros"},{"comment":"/**\n* Create a matrix of all zeros\n*\n* This method mimics Matlab's `zeros` method\n*\n* @method zeros\n* @param {Number} m - The number of rows\n* @param {Number} [n=m] - The number of columns\n* @returns {Array.<Array.<Number>>} B - An n-by-m matrix of zeros\n* @public\n* @memberOf matlab\n* @since 0.0.2\n*/","meta":{"range":[366,420],"filename":"zeros.js","lineno":16,"path":"/src/matlab","code":{"id":"astnode100002620","name":"zeros","type":"FunctionDeclaration","paramnames":["m","n"]}},"undocumented":true,"name":"zeros","longname":"zeros","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Implements Matlab functions or functionality.\n*\n* The goal here is not a perfect reproduction of matlab logic but just a minimal implementation\n* needed to correctly reproduce the SSIM matlab script.\n*\n* That means that functionality used will be implemented but additional / unused parameters will\n* not.\n*\n* @namespace matlab\n*/","meta":{"range":[434,780],"filename":"matlab.js","lineno":11,"path":"/src","code":{}},"description":"Implements Matlab functions or functionality.\n\nThe goal here is not a perfect reproduction of matlab logic but just a minimal implementation\nneeded to correctly reproduce the SSIM matlab script.\n\nThat means that functionality used will be implemented but additional / unused parameters will\nnot.","kind":"namespace","name":"matlab","longname":"matlab","scope":"global"},{"comment":"","meta":{"range":[6,24],"filename":"readpixels.js","lineno":1,"path":"/src","code":{"id":"astnode100002740","name":"fs","type":"CallExpression","value":""}},"undocumented":true,"name":"fs","longname":"fs","kind":"constant","scope":"global"},{"comment":"","meta":{"range":[32,55],"filename":"readpixels.js","lineno":2,"path":"/src","code":{"id":"astnode100002746","name":"http","type":"CallExpression","value":""}},"undocumented":true,"name":"http","longname":"http","kind":"constant","scope":"global"},{"comment":"","meta":{"range":[63,89],"filename":"readpixels.js","lineno":3,"path":"/src","code":{"id":"astnode100002752","name":"Canvas","type":"CallExpression","value":""}},"undocumented":true,"name":"Canvas","longname":"Canvas","kind":"constant","scope":"global"},{"comment":"","meta":{"range":[97,130],"filename":"readpixels.js","lineno":4,"path":"/src","code":{"id":"astnode100002758","name":"imageType","type":"CallExpression","value":""}},"undocumented":true,"name":"imageType","longname":"imageType","kind":"constant","scope":"global"},{"comment":"","meta":{"range":[138,161],"filename":"readpixels.js","lineno":5,"path":"/src","code":{"id":"astnode100002764","name":"bmp","type":"CallExpression","value":""}},"undocumented":true,"name":"bmp","longname":"bmp","kind":"constant","scope":"global"},{"comment":"/**\n* Parses the buffer data and converts it into a 3d matrix\n*\n* @method bufferToMatrix\n* @param {Object} imageData - An image data object (the matrix and dimensions)\n* @returns {Array.<Array.<Array.<Number>>>} image - A 3d image matrix\n* @private\n* @memberOf bufferToMatrix\n* @since 0.0.2\n*/","meta":{"range":[164,466],"filename":"readpixels.js","lineno":7,"path":"/src","code":{}},"description":"Parses the buffer data and converts it into a 3d matrix","kind":"function","name":"bufferToMatrix","params":[{"type":{"names":["Object"]},"description":"An image data object (the matrix and dimensions)","name":"imageData"}],"returns":[{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"image - A 3d image matrix"}],"access":"private","memberof":"bufferToMatrix","since":"0.0.2","scope":"static","longname":"bufferToMatrix.bufferToMatrix"},{"comment":"/**\n* Parses the buffer data and converts it into a 3d matrix\n*\n* @method bufferToMatrix\n* @param {Object} imageData - An image data object (the matrix and dimensions)\n* @returns {Array.<Array.<Array.<Number>>>} image - A 3d image matrix\n* @private\n* @memberOf bufferToMatrix\n* @since 0.0.2\n*/","meta":{"range":[467,808],"filename":"readpixels.js","lineno":17,"path":"/src","code":{"id":"astnode100002769","name":"bufferToMatrix","type":"FunctionDeclaration","paramnames":["imageData"]},"vars":{"matrix":"bufferToMatrix~matrix","d":"bufferToMatrix~d","x":"bufferToMatrix~x","matrix[undefined]":"bufferToMatrix~matrix.undefined]","y":"bufferToMatrix~y","index":"bufferToMatrix~index","matrix[undefined][undefined]":"bufferToMatrix~matrix.undefined][undefined]"}},"undocumented":true,"name":"bufferToMatrix","longname":"bufferToMatrix","kind":"function","scope":"global","params":[]},{"comment":"/**\n* If `limit` is set, it will generate proportional dimensions to `width` and `height` with the\n* smallest dimesion limited to `limit`.\n*\n* @method getImageDimensions\n* @param {number} width - The input width size, in pixels\n* @param {number} height - The input height size, in pixels\n* @param {number} [limit] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Object} dimensions - A key value pair containing the width / height to use, downsized\n* when appropriate\n* @memberOf readpixels\n* @since 0.0.4\n*/","meta":{"range":[809,1431],"filename":"readpixels.js","lineno":32,"path":"/src","code":{}},"description":"If `limit` is set, it will generate proportional dimensions to `width` and `height` with the\nsmallest dimesion limited to `limit`.","kind":"function","name":"getImageDimensions","params":[{"type":{"names":["number"]},"description":"The input width size, in pixels","name":"width"},{"type":{"names":["number"]},"description":"The input height size, in pixels","name":"height"},{"type":{"names":["number"]},"optional":true,"description":"A limit that, if set and both dimensions (width / height) surpass it,\nwill downsize the image to that size on the smallest dimension.","name":"limit"}],"returns":[{"type":{"names":["Object"]},"description":"dimensions - A key value pair containing the width / height to use, downsized\nwhen appropriate"}],"memberof":"readpixels","since":"0.0.4","scope":"static","longname":"readpixels.getImageDimensions"},{"comment":"/**\n* If `limit` is set, it will generate proportional dimensions to `width` and `height` with the\n* smallest dimesion limited to `limit`.\n*\n* @method getImageDimensions\n* @param {number} width - The input width size, in pixels\n* @param {number} height - The input height size, in pixels\n* @param {number} [limit] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Object} dimensions - A key value pair containing the width / height to use, downsized\n* when appropriate\n* @memberOf readpixels\n* @since 0.0.4\n*/","meta":{"range":[1432,1747],"filename":"readpixels.js","lineno":46,"path":"/src","code":{"id":"astnode100002855","name":"getImageDimensions","type":"FunctionDeclaration","paramnames":["width","height","limit"]},"vars":{"ratio":"getImageDimensions~ratio"}},"undocumented":true,"name":"getImageDimensions","longname":"getImageDimensions","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Parses the buffer data and returns it. If `limit` is set, it will make sure the smallest dimesion\n* will at most be of size `limit`.\n*\n* @method parse\n* @param {Buffer} data - The input image buffer data\n* @param {number} [limit] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Promise} promise - A promise that resolves in an object containing the image 3d matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[1749,2285],"filename":"readpixels.js","lineno":58,"path":"/src","code":{}},"description":"Parses the buffer data and returns it. If `limit` is set, it will make sure the smallest dimesion\nwill at most be of size `limit`.","kind":"function","name":"parse","params":[{"type":{"names":["Buffer"]},"description":"The input image buffer data","name":"data"},{"type":{"names":["number"]},"optional":true,"description":"A limit that, if set and both dimensions (width / height) surpass it,\nwill downsize the image to that size on the smallest dimension.","name":"limit"}],"returns":[{"type":{"names":["Promise"]},"description":"promise - A promise that resolves in an object containing the image 3d matrix"}],"access":"private","memberof":"readpixels","since":"0.0.1","scope":"static","longname":"readpixels.parse"},{"comment":"/**\n* Parses the buffer data and returns it. If `limit` is set, it will make sure the smallest dimesion\n* will at most be of size `limit`.\n*\n* @method parse\n* @param {Buffer} data - The input image buffer data\n* @param {number} [limit] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Promise} promise - A promise that resolves in an object containing the image 3d matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[2286,2856],"filename":"readpixels.js","lineno":71,"path":"/src","code":{"id":"astnode100002913","name":"parse","type":"FunctionDeclaration","paramnames":["data","limit"]},"vars":{"undefined":null,"imageData":"parse~imageData","img":"parse~img","img.src":"parse~img.src","canvas":"parse~canvas","ctx":"parse~ctx","":null}},"undocumented":true,"name":"parse","longname":"parse","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Reads image data from a url and returns it\n*\n* @method loadUrl\n* @param {string} url - url to load image data from\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[2858,3119],"filename":"readpixels.js","lineno":96,"path":"/src","code":{}},"description":"Reads image data from a url and returns it","kind":"function","name":"loadUrl","params":[{"type":{"names":["string"]},"description":"url to load image data from","name":"url"}],"returns":[{"type":{"names":["Promise"]},"description":"promise - A promise that resolves with the image 3D matrix"}],"access":"private","memberof":"readpixels","since":"0.0.1","scope":"static","longname":"readpixels.loadUrl"},{"comment":"/**\n* Reads image data from a url and returns it\n*\n* @method loadUrl\n* @param {string} url - url to load image data from\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[3120,3402],"filename":"readpixels.js","lineno":106,"path":"/src","code":{"id":"astnode100003028","name":"loadUrl","type":"FunctionDeclaration","paramnames":["url"]},"vars":{"":null}},"undocumented":true,"name":"loadUrl","longname":"loadUrl","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Reads image data from the file system and returns it\n*\n* @method loadFs\n* @param {string} path - File path to load image data from\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[3404,3681],"filename":"readpixels.js","lineno":120,"path":"/src","code":{}},"description":"Reads image data from the file system and returns it","kind":"function","name":"loadFs","params":[{"type":{"names":["string"]},"description":"File path to load image data from","name":"path"}],"returns":[{"type":{"names":["Promise"]},"description":"promise - A promise that resolves with the image 3D matrix"}],"access":"private","memberof":"readpixels","since":"0.0.1","scope":"static","longname":"readpixels.loadFs"},{"comment":"/**\n* Reads image data from the file system and returns it\n*\n* @method loadFs\n* @param {string} path - File path to load image data from\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @private\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[3682,3865],"filename":"readpixels.js","lineno":130,"path":"/src","code":{"id":"astnode100003088","name":"loadFs","type":"FunctionDeclaration","paramnames":["path"]},"vars":{"":null}},"undocumented":true,"name":"loadFs","longname":"loadFs","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Reads image data from the input and returns it\n*\n* @method readpixels\n* @param {string|Buffer} url - A url, file path or buffer to use to load the image data\n* @param {number} [limit=0] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @public\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[3867,4338],"filename":"readpixels.js","lineno":143,"path":"/src","code":{}},"description":"Reads image data from the input and returns it","kind":"function","name":"readpixels","params":[{"type":{"names":["string","Buffer"]},"description":"A url, file path or buffer to use to load the image data","name":"url"},{"type":{"names":["number"]},"optional":true,"defaultvalue":0,"description":"A limit that, if set and both dimensions (width / height) surpass it,\nwill downsize the image to that size on the smallest dimension.","name":"limit"}],"returns":[{"type":{"names":["Promise"]},"description":"promise - A promise that resolves with the image 3D matrix"}],"access":"public","memberof":"readpixels","since":"0.0.1","scope":"static","longname":"readpixels.readpixels"},{"comment":"/**\n* Reads image data from the input and returns it\n*\n* @method readpixels\n* @param {string|Buffer} url - A url, file path or buffer to use to load the image data\n* @param {number} [limit=0] - A limit that, if set and both dimensions (width / height) surpass it,\n* will downsize the image to that size on the smallest dimension.\n* @returns {Promise} promise - A promise that resolves with the image 3D matrix\n* @public\n* @memberOf readpixels\n* @since 0.0.1\n*/","meta":{"range":[4339,4692],"filename":"readpixels.js","lineno":155,"path":"/src","code":{"id":"astnode100003121","name":"readpixels","type":"FunctionDeclaration","paramnames":["url","limit"]},"vars":{"bufferPromise":"readpixels~bufferPromise","":null}},"undocumented":true,"name":"readpixels","longname":"readpixels","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Image loading logic\n*\n* @namespace readpixels\n*/","meta":{"range":[4694,4752],"filename":"readpixels.js","lineno":169,"path":"/src","code":{}},"description":"Image loading logic","kind":"namespace","name":"readpixels","longname":"readpixels","scope":"global"},{"comment":"/**\n* Generates a SSIM map based on two input image matrices. For images greater than 512 pixels, it\n* will downsample by default (unless `options.downsample` is set to falsy).\n*\n* This method is a line-by-line port of `assets/ssim.m`. Some operations are more verbose here\n* since more logic is needed in JS to manipulate matrices than in Matlab\n*\n* Note that setting `options1.k1` and `options.k2` to 0 will generate the UQI (Universal Quality\n* Index), since it's a special case of SSIM. In general that's undesierable since `k1` and `k2`\n* contribute to the stabilization coeficients `c1` and `c2`.\n*\n* @method ssim\n* @param {Array.<Array.<Array.<Number>>>} pixels1 - The reference rgb matrix\n* @param {Array.<Array.<Array.<Number>>>} pixels2 - The second rgb matrix to compare against\n* @param {Object} options - The input options parameter\n* the reference one\n* @returns {Array.<Array.<Number>>} ssim_map - A matrix containing the map of computed SSIMs\n* @public\n* @memberOf ssim\n* @since 0.0.2\n*/","meta":{"range":[152,1175],"filename":"ssim.js","lineno":4,"path":"/src","code":{}},"description":"Generates a SSIM map based on two input image matrices. For images greater than 512 pixels, it\nwill downsample by default (unless `options.downsample` is set to falsy).\n\nThis method is a line-by-line port of `assets/ssim.m`. Some operations are more verbose here\nsince more logic is needed in JS to manipulate matrices than in Matlab\n\nNote that setting `options1.k1` and `options.k2` to 0 will generate the UQI (Universal Quality\nIndex), since it's a special case of SSIM. In general that's undesierable since `k1` and `k2`\ncontribute to the stabilization coeficients `c1` and `c2`.","kind":"function","name":"ssim","params":[{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"The reference rgb matrix","name":"pixels1"},{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"The second rgb matrix to compare against","name":"pixels2"},{"type":{"names":["Object"]},"description":"The input options parameter\nthe reference one","name":"options"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"ssim_map - A matrix containing the map of computed SSIMs"}],"access":"public","memberof":"ssim","since":"0.0.2","scope":"static","longname":"ssim.ssim"},{"comment":"/**\n* Generates a SSIM map based on two input image matrices. For images greater than 512 pixels, it\n* will downsample by default (unless `options.downsample` is set to falsy).\n*\n* This method is a line-by-line port of `assets/ssim.m`. Some operations are more verbose here\n* since more logic is needed in JS to manipulate matrices than in Matlab\n*\n* Note that setting `options1.k1` and `options.k2` to 0 will generate the UQI (Universal Quality\n* Index), since it's a special case of SSIM. In general that's undesierable since `k1` and `k2`\n* contribute to the stabilization coeficients `c1` and `c2`.\n*\n* @method ssim\n* @param {Array.<Array.<Array.<Number>>>} pixels1 - The reference rgb matrix\n* @param {Array.<Array.<Array.<Number>>>} pixels2 - The second rgb matrix to compare against\n* @param {Object} options - The input options parameter\n* the reference one\n* @returns {Array.<Array.<Number>>} ssim_map - A matrix containing the map of computed SSIMs\n* @public\n* @memberOf ssim\n* @since 0.0.2\n*/","meta":{"range":[1176,2816],"filename":"ssim.js","lineno":25,"path":"/src","code":{"id":"astnode100003228","name":"ssim","type":"FunctionDeclaration","paramnames":["pixels1","pixels2","options"]},"vars":{"w":"ssim~w","L":"ssim~L","c1":"ssim~c1","c2":"ssim~c2","":null,"μ1":"ssim~μ1","μ2":"ssim~μ2","μ1Sq":"ssim~μ1Sq","μ2Sq":"ssim~μ2Sq","μ12":"ssim~μ12","pixels1Sq":"ssim~pixels1Sq","pixels2Sq":"ssim~pixels2Sq","minusμ1Sq":"ssim~minusμ1Sq","minusμ2Sq":"ssim~minusμ2Sq","minusμ12":"ssim~minusμ12","σ1Sq":"ssim~σ1Sq","σ2Sq":"ssim~σ2Sq","σ12":"ssim~σ12","num1":"ssim~num1","num2":"ssim~num2","denom1":"ssim~denom1","denom2":"ssim~denom2","numerator1":"ssim~numerator1","numerator2":"ssim~numerator2","denominator1":"ssim~denominator1","denominator2":"ssim~denominator2"}},"undocumented":true,"name":"ssim","longname":"ssim","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Downsamples images greater than 256 pixels on the smallest direction. If neither image does they\n* are returned as they are.\n*\n* This can modifies the resulting SSIM index but should speed up processing.\n*\n* Unfortunately this implementation is so slow that's actual deterimental.\n*\n* @method automaticDownsampling\n* @param {Array.<Array.<Array.<Number>>>} pixels1 - The first rgb matrix to downsample\n* @param {Array.<Array.<Array.<Number>>>} pixels2 - The second rgb matrix to downsample\n* @param {number} [maxSize=256] - The maximum size on the smallest dimension\n* @returns {Array.<Array.<Number>>} ssim_map - A matrix containing the map of computed SSIMs\n* @private\n* @memberOf ssim\n* @since 0.0.2\n*/","meta":{"range":[2818,3545],"filename":"ssim.js","lineno":73,"path":"/src","code":{}},"description":"Downsamples images greater than 256 pixels on the smallest direction. If neither image does they\nare returned as they are.\n\nThis can modifies the resulting SSIM index but should speed up processing.\n\nUnfortunately this implementation is so slow that's actual deterimental.","kind":"function","name":"automaticDownsampling","params":[{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"The first rgb matrix to downsample","name":"pixels1"},{"type":{"names":["Array.<Array.<Array.<Number>>>"]},"description":"The second rgb matrix to downsample","name":"pixels2"},{"type":{"names":["number"]},"optional":true,"defaultvalue":256,"description":"The maximum size on the smallest dimension","name":"maxSize"}],"returns":[{"type":{"names":["Array.<Array.<Number>>"]},"description":"ssim_map - A matrix containing the map of computed SSIMs"}],"access":"private","memberof":"ssim","since":"0.0.2","scope":"static","longname":"ssim.automaticDownsampling"},{"comment":"/**\n* Downsamples images greater than 256 pixels on the smallest direction. If neither image does they\n* are returned as they are.\n*\n* This can modifies the resulting SSIM index but should speed up processing.\n*\n* Unfortunately this implementation is so slow that's actual deterimental.\n*\n* @method automaticDownsampling\n* @param {Array.<Array.<Array.<Number>>>} pixels1 - The first rgb matrix to downsample\n* @param {Array.<Array.<Array.<Number>>>} pixels2 - The second rgb matrix to downsample\n* @param {number} [maxSize=256] - The maximum size on the smallest dimension\n* @returns {Array.<Array.<Number>>} ssim_map - A matrix containing the map of computed SSIMs\n* @private\n* @memberOf ssim\n* @since 0.0.2\n*/","meta":{"range":[3546,4182],"filename":"ssim.js","lineno":90,"path":"/src","code":{"id":"astnode100003515","name":"automaticDownsampling","type":"FunctionDeclaration","paramnames":["pixels1","pixels2","maxSize"]},"vars":{"factor":"automaticDownsampling~factor","rfactor":"automaticDownsampling~rfactor","f":"automaticDownsampling~f","lpf":"automaticDownsampling~lpf","pixels1":"automaticDownsampling~pixels1","pixels2":"automaticDownsampling~pixels2","rowLength":"automaticDownsampling~rowLength","colLength":"automaticDownsampling~colLength"}},"undocumented":true,"name":"automaticDownsampling","longname":"automaticDownsampling","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Implements all ssim-specific logic.\n*\n* Reproduces the original SSIM matlab scripts. For a direct comparison you may want to check the\n* scripts contained within `/assets`\n*\n* @namespace ssim\n*/","meta":{"range":[4184,4391],"filename":"ssim.js","lineno":111,"path":"/src","code":{}},"description":"Implements all ssim-specific logic.\n\nReproduces the original SSIM matlab scripts. For a direct comparison you may want to check the\nscripts contained within `/assets`","kind":"namespace","name":"ssim","longname":"ssim","scope":"global"},{"comment":"/**\n* Throws an error specifying a value required. It's used as default value. For instance:\n*\n* ```javascript\n* function test(requiredParam = force('requiredParam')) {\n*   console.log(requiredParam);\n* }\n* ```\n*\n* That will log `reqgetwindowuiredParam` if called like `test('blah')` but, if the parameter is not\n* set, it will throw with a message indicating that `requireParam` is needed\n*\n* @method force\n* @param {String} name - The name of the parameter required\n* @public\n* @memberOf util\n* @since 0.0.1\n*/","meta":{"range":[0,529],"filename":"util.js","lineno":1,"path":"/src","code":{}},"description":"Throws an error specifying a value required. It's used as default value. For instance:\n\n```javascript\nfunction test(requiredParam = force('requiredParam')) {\n  console.log(requiredParam);\n}\n```\n\nThat will log `reqgetwindowuiredParam` if called like `test('blah')` but, if the parameter is not\nset, it will throw with a message indicating that `requireParam` is needed","kind":"function","name":"force","params":[{"type":{"names":["String"]},"description":"The name of the parameter required","name":"name"}],"access":"public","memberof":"util","since":"0.0.1","scope":"static","longname":"util.force"},{"comment":"/**\n* Throws an error specifying a value required. It's used as default value. For instance:\n*\n* ```javascript\n* function test(requiredParam = force('requiredParam')) {\n*   console.log(requiredParam);\n* }\n* ```\n*\n* That will log `reqgetwindowuiredParam` if called like `test('blah')` but, if the parameter is not\n* set, it will throw with a message indicating that `requireParam` is needed\n*\n* @method force\n* @param {String} name - The name of the parameter required\n* @public\n* @memberOf util\n* @since 0.0.1\n*/","meta":{"range":[530,601],"filename":"util.js","lineno":19,"path":"/src","code":{"id":"astnode100003650","name":"force","type":"FunctionDeclaration","paramnames":["name"]}},"undocumented":true,"name":"force","longname":"force","kind":"function","scope":"global","params":[]},{"comment":"/**\n* Convenience methods\n*\n* @namespace util\n*/","meta":{"range":[603,655],"filename":"util.js","lineno":23,"path":"/src","code":{}},"description":"Convenience methods","kind":"namespace","name":"util","longname":"util","scope":"global"}]}